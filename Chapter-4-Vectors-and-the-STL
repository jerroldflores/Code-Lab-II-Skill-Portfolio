Exercise 1 - Input Vectors
#include <iostream>
#include <vector>
using namespace std;

int main()
{
    vector<int> numbers(5);

    cout << "-----------------" <<endl;
    cout << " Enter 5 numbers: " << endl;
    cout << "-----------------" <<endl;

    for (int i = 0; i < 5; i++)
    {
        cin >> numbers[i];
    }

    cout << " The numbers you entered are: " << endl;

    for (int i = 0; i < 5; i++)
    {
        cout << numbers[i] << endl;
    }
    return 0;
}

Exercise 2 - Vector Workout
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
    vector<int> myVector = { 7,13,9,18,1,12,4,30,20,3 };

    for (int i = 0; i < 10; i++) 
    {
        cout << i + 1 << ") ";
        cout << myVector[i] << endl;
    }

    sort(myVector.begin(), myVector.end());
    cout << "The highest value is " << myVector.back() << endl;
    cout << "The lowest value is " << myVector.front() << endl;

    cout << "\nResize to 20 elements: " << endl;
    myVector.resize(20);
    for (int i = 0; i < 20; i++) 
    {
        cout << myVector[i] << ",";
    }

    cout << "\n\nResize to 20 elements: " << endl;
    myVector = { 7,13,9,18,1,12,4,30,20,3,0,5,14,29,6,28,21,70,2,15 };
    for (int i = 0; i < 20; i++) 
    {
        cout << myVector[i] << ",";
    }

    cout << "\n\nPush 2 new elements in the list: " << endl;
    myVector.push_back(90);
    myVector.push_back(77);
    for (int i = 0; i < 22; i++) 
    {
        cout << myVector[i] << ",";
    }

    cout << "The first element of the list is " << myVector.front() << endl;
    cout << "The last element of the list is " << myVector.back() << endl;

    myVector.clear();
    cout << "\nAfter clearing the vector  the size is " << myVector.size() << endl;

    if (myVector.empty())
    {
        cout << "The vector is empty." << endl;
    }
    else {
        cout << "The vector is not empty." << endl;
    }
}

Exercise 3 - Shopping List
#include <iostream>
#include <iomanip>
using namespace std;

int main()
{
    string itemName[100];
    double itemCost[100] = {0.0};

    string names = "";
    double total = 0;
    int numItems = 0;

    cout << "Enter number of grocery items you will be entering: ";
    cin >> numItems;
    cout << "\n";

        for (int i = 1; i <= 100; i++)
        {
        cin >> itemName[i] >> itemCost[i];
        }

    cout << "Please enter the item names as one word only. Example: tomatoes\n" ;
    cout << "Enter the cost as a decimal number. Example: 2.44\n\n";


    for (int i = 0; i < 3; ++i)
    {
        cout << "Enter item: ";
        cin >> itemName[i];
        cout << "Enter the cost of the " << itemName[i] << " $";
        cin >> itemCost[i];
        }

        cout << "\n";


      for (int i = 0; i < 3; ++i)
{
    cout << itemName[i];
    cout << ' ';
    cout << itemCost[i];
    cout << endl;
}

//total calculations
for (int i = 1; i <= 3; i++)
{
    total += itemCost[i];
    cout << total;
}


return 0;
}

Exercise 4 - Duplicate Checker
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main()
{
    string input;

    cout<<"Enter in your shopping list.  Enter in * to indicate you are done"<<endl;

    vector<string> shoppingList;
    while(input != "*")
        {
            cin>>input;
            shoppingList.push_back(input);
        }
    if(input == "*")
    {
        for(int i = 0 ; i<(shoppingList.size() -1);i++)
            cout<<shoppingList[i]<<" " ;
    }

    return 0;
}

Exercise 5 - Weather Data Vector
#include <iostream>
using namespace std;

int main()
{
    float frh, cel;
	cout << "\n\n Convert temperature in Fahrenheit to Celsius :\n";
	cout << "---------------------------------------------------\n";	
    cout << " Input the temperature in Fahrenheit : ";
    cin >> frh;
    cel = ((frh * 5.0)-(5.0 * 32))/9;
    cout << " The temperature in Fahrenheit : " << frh << endl;
    cout << " The temperature in Celsius : " << cel << endl;
	cout << endl;
    return 0;
}

Exercise 6 - Sports League

Exercise 7 - Pairs & Tuples
Part 1 Pairs

Part 2 Tuples
#include<iostream> 
#include<tuple> // for tuple 
using namespace std; 
int main() 
{ 
    // Declaring tuple 
    tuple <char, int, float> geek; 

    // Assigning values to tuple using make_tuple() 
    geek = make_tuple('a', 10, 15.5); 

    // Printing initial tuple values using get() 
    cout << "The initial values of tuple are : "; 
    cout << get<0>(geek) << " " << get<1>(geek); 
    cout << " " << get<2>(geek) << endl; 

    // Use of get() to change values of tuple 
    get<0>(geek) = 'b'; 
    get<2>(geek) =  20.5; 

     // Printing modified tuple values 
    cout << "The modified values of tuple are : "; 
    cout << get<0>(geek) << " " << get<1>(geek); 
    cout << " " << get<2>(geek) << endl; 

    return 0; 
}

Exercise 8 - Vending Machine Upgrade

Exercise 9 - Student Map 
#include <iostream>
#include <map>

struct Parent
{
    std::string phone_number;
    Parent(std::string num): phone_number(num){}
};

struct Student
{
    int student_id;
    std::string student_name;
    Parent* parent = nullptr;

    Student(int id, std::string name):student_id(id), student_name(name) {}

};

int main()
{
    Parent* p_tim = new Parent("0712323456");
    Parent* p_tom = new Parent("0112122123");

    Student ann(1, "Anne");
    Student bobby(2, "Bobby");

    ann.parent = p_tim;
    bobby.parent = p_tom;

    std::map<std::string, Student> students;
    students.insert(std::make_pair("ann", ann));
    students.insert(std::make_pair("bob", bobby));

    for(auto student:students)
    {
        std::cout << "Student: ID = " << student.second.student_id << " and Name: " << student.second.student_name << std::endl;
    }

    return 0;
}

Exercise 10 - Map Quiz
